plugins {
    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'

    // https://docs.gradle.org/current/userguide/maven_plugin.html
    id 'maven-publish'

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'signing'

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

    // https://plugins.gradle.org/plugin/net.ltgt.errorprone
    id 'net.ltgt.errorprone' version '1.3.0'

    // https://plugins.gradle.org/plugin/com.diffplug.spotless
    id 'com.diffplug.spotless' version '5.8.2'

    // https://plugins.gradle.org/plugin/com.github.jk1.dependency-license-report
    id 'com.github.jk1.dependency-license-report' version '1.16'
}
apply from: 'setup.gradle'
if (!CI) {
    apply from: 'zomboid.gradle'
}
apply from: 'spotless.gradle'
apply from: 'publish.gradle'

group 'io.github.cocolabs'
version file('version.txt').readLines().get(0)

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

application {
    mainClassName = 'io.cocolabs.pz.zdoc.Main'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

configurations {
    zomboidRuntimeOnly
    zomboidImplementation
    zombieCompileOnly.extendsFrom compileOnly
    runtimeOnly.extendsFrom zomboidImplementation
    testImplementation.extendsFrom zomboidImplementation
    testCompileOnly.extendsFrom compileOnly
    intTestImplementation.extendsFrom testImplementation
    intTestCompileOnly.extendsFrom compileOnly
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    main {
        java.srcDir 'src/main/java'
        compileClasspath += configurations.zomboidImplementation
        runtimeClasspath += configurations.zomboidRuntimeOnly
    }
    media {
        java.srcDir 'media/lua'
    }
    zombie {
        java.srcDir 'src/zombie/java'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'

        // empty zomboid classes are needed only when game directory
        // is not available such as when running tests on CI server
        if (CI) {
            compileClasspath += sourceSets.zombie.output
            runtimeClasspath += sourceSets.zombie.output
        }
    }
    intTest {
        java.srcDir 'src/intTest/java'
        resources.srcDir 'src/intTest/resources'

        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += configurations.zomboidRuntimeOnly
    }
}

idea {
    module {
        inheritOutputDirs = true
        excludeDirs += [file('logs'), file('build')]
        sourceDirs -= project.sourceSets.intTest.java.srcDirs
        testSourceDirs += project.sourceSets.intTest.java.srcDirs
    }
}

repositories {
    mavenCentral()
}
/**
 * This task will sync zomboidClassesDir with classes found in game install directory.
 * Note that it needs to run before dependencies are declared so that
 * the assembled classes can be included onto the classpath
 */
if (!CI) {
    task zomboidClasses(type: Sync) {
        description 'Assembles zomboid classes.'
        group 'zomboid'
        includeEmptyDirs false
        from project.ext.gameDir
        include '**/*.class', 'stdlib.lbc'
        into zomboidClassesDir
    }
    classes.dependsOn(zomboidClasses)
}
dependencies {
    // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
    compileOnly 'com.google.errorprone:error_prone_core:2.5.1'

    // https://mvnrepository.com/artifact/com.google.errorprone/javac
    errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation('com.google.guava:guava:30.1-jre') {
        exclude group: 'com.google.code.findbugs'
        exclude group: 'com.google.errorprone'
        exclude group: 'org.checkerframework'
        exclude module: 'failureaccess'
        exclude module: 'listenablefuture'
        exclude module: 'j2objc-annotations'
    }
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.8.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation 'org.apache.commons:commons-collections4:4.4'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.4'

    // https://mvnrepository.com/artifact/org.springframework/spring-core
    implementation 'org.springframework:spring-core:5.3.2'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    compileOnly 'org.jetbrains:annotations:20.1.0'

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation 'org.jsoup:jsoup:1.13.1'

    if (!CI) {
        // Project Zomboid libraries
        zomboidRuntimeOnly fileTree(dir: gameDir, include: ['*.jar'])

        // Project Zomboid classes
        zomboidImplementation files('lib/zomboid.jar')
    }
}

test {
    // Clean the old test-results first
    dependsOn cleanTest

    useJUnitPlatform()
    testLogging.exceptionFormat = 'full'

    // preserve system properties because gradle tests are forked in a new JVM
    systemProperty('zdoc.logger', System.getProperty('zdoc.logger'))

    // Fail the 'test' task on the first test failure
    failFast = false

    doFirst {
        logger.debug('Running project Unit Tests...')
    }
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
    doLast {
        logger.quiet('Finished running Unit Tests.')
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        xml.destination file("${buildDir}/coverage.xml")
    }
}
check.dependsOn jacocoTestReport

licenseReport {
    //noinspection UnnecessaryQualifiedReference
    renderers = [new com.github.jk1.license.render.InventoryHtmlReportRenderer()]
}

tasks.register('zomboidVersion', JavaExec.class) {
    it.description('Read Project Zomboid game version.')
    it.group('zomboid')

    it.classpath = sourceSets.main.runtimeClasspath
    it.main = application.mainClassName
    it.args 'version'

    OutputStream oStream = new ByteArrayOutputStream()
    it.setStandardOutput(oStream)

    it.doLast {
        // get application command output from stream
        // ex. game version 41.50 - IWBUMS
        def versionText = oStream.toString()

        // get version number and classifier (ex. 41.50-IWBUMS)
        project.ext.gameVersion = versionText.substring(18).replaceAll(" ", "")
        println("game version: ${project.ext.gameVersion}")
    }
}

tasks.register('luaDocJar', ZDocJar.class) {
    it.description('Assembles a jar archive containing compiled lua classes.')
    it.group('zomboid')

    it.getArchiveAppendix().set('lua')
    it.from 'media/lua'
}

task cleanMedia(type: Delete) {
    description('Deletes media directory.')
    group('zomboid')
    delete 'media/lua'
}
clean.dependsOn(cleanMedia)

// integration tasks are tasks that should not be run on CI
// always define this after declaring all tasks
def integrationTasks = [
        compileIntTestJava
]
integrationTasks.forEach({t -> t.onlyIf { !CI }})
